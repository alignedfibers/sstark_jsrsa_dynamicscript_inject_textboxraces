#!/bin/bash

# http://sites.google.com/site/jozsefbekes/Home/gtalx
#
# This script is for the beginners and the lazy to perform the complete buid. It will build all the
#  necessary binaries and will copy all files that should be installed into a new directory called
# install. You can take a look at the files there, all those files will be copied to /usr if you execute
# ./make install. 
#
# If you use a Linux distribution that has its own packaging system, you can just execute ./make
# and create a package from the generated files in the install directory. If your distributon offers
# packages for speex, oRTP and mediastreamer2, I suggest that you install those first and then
# run ./make again so that nothing else but the libjingle + gtalx files will be included in the
# package. If you are creating a package not just for yourself, I suggest that you package speex,
# oRTP and mediastreamer2 separately from each other and from libjingle/gtalx.
#
# ./make
# Checks which libraries have to be built (speex, ortp and mediastreamer2 might already be installed)
# and builds the necessary ones, copies the files that should be installed into the install directory.
# Also generates the uninstall script that you can use to remove all files that executing ./make install
# creates.
#
# ./make install
# Copies the files from the install directory (generated by ./make) into /usr. You have to be root 
# to call ./make install. This operation will also generate the uninstall script (./uninstall).
# You can use the ./uninstall script to uninstall the installed files, use it at your own risk.
#
# ./make uninstall
# Will display that you should use the uninstall script for uninstalling
#
# ./make clean, ./make distclean
# These commands will run make clean/make distlean in every project


param1=$1
error=""
cur_rev="0.1.0"

searchForLibs() 
{
    echo "searching for installed components ..."

    SPEEXFIND=$(find /usr -name "libspeex.so" -print 2>/dev/null) 
    if [ "$SPEEXFIND" = "" ]; then
        SPEEXFIND="build"
    else
        echo found speex installed here: $SPEEXFIND
    fi

    ORTPFIND=$(find /usr -name "libortp.so" -print 2>/dev/null)
    if [ "$ORTPFIND" = "" ]; then
        ORTPFIND="build"
    else
        echo found oRTP installed here: $ORTPFIND
    fi

    MS2FIND=$(find /usr -name "libmediastreamer.so" -print 2>/dev/null)
    if [ "$MS2FIND" = "" ]; then
        MS2FIND="build"
    else
        echo found mediastreamer installed here: $MS2FIND
    fi
}

buildSpeex()
{
    echo "building speex ..."
    pushd speex
    chmod +x configure
    ./configure --prefix=$PWD/../install/usr
    error=$?
    if [ $error = 0 ]; then
        make
        error=$?
    fi
    if [ $error = 0 ]; then
        make install
        error=$?
    fi
    popd
}

buildORTP()
{
    echo "building oRTP ..."
    pushd oRTP
    chmod +x configure
    ./configure --prefix=$PWD/../install/usr
    error=$?
    if [ $error = 0 ]; then
        make
        error=$?
    fi
    if [ $error = 0 ]; then
        make install
        error=$?
    fi
    popd
}

buildMediaStreamer2()
{
    echo "building mediastreamer2 ..."
    pushd mediastreamer2
    chmod +x configure
    ./configure --enable-external-ortp --disable-video --prefix=$PWD/../install/usr
    error=$?
    if [ $error = 0 ]; then
        make
        error=$?
    fi
    if [ $error = 0 ]; then
        make install
        error=$?
    fi
    popd
}

buildLibjingle()
{
    echo "building libjingle ..."
    pushd libjingle-modified
    chmod +x configure
    ./configure --prefix=$PWD/../install/usr
    error=$?
    if [ $error = 0 ]; then
        make
        error=$?
    fi
    if [ $error = 0 ]; then
        make install
        error=$?
    fi
    popd
}

buildGtalx()
{
    echo "building gtalx ..."
    pushd gtalx
    chmod +x configure
    ./configure --prefix=$PWD/../install/usr
    error=$?
    if [ $error = 0 ]; then
        make
        error=$?
    fi
    if [ $error = 0 ]; then
        make install
        error=$?
    fi
    popd
    
    if [ $error = 0 ]; then
        mkdir -p install/usr/share/applications
	cp ./gtalx.desktop install/usr/share/applications
    fi

}

buildAll()
{
    if [ -d "install" ]; then
        rm -r -f install
    fi

    SPEEXFIND=""
    ORTPFIND=""
    MS2FIND=""

    mkdir -p $PWD/install/usr
    searchForLibs

    if [ "$SPEEXFIND" = "build" ]; then
        buildSpeex
        export SPEEX_CFLAGS=" -I$PWD/speex/include -I$PWD/speex/include/speex"
        export SPEEX_LIBS="$PWD/speex/libspeex/libspeex.la"
        if [ "$error" != "0" ]; then
            echo "make failed."
            exit $error
        fi
    fi
    
    if [ "$ORTPFIND" = "build" ]; then
        buildORTP
        export ORTP_CFLAGS=" -I$PWD/oRTP/include -I$PWD/oRTP/include/ortp"
        export ORTP_LIBS="$PWD/oRTP/src/libortp.la -lm"
        if [ "$error" != "0" ]; then
            echo "make failed."
            exit $error
        fi
    fi
    if [ "$MS2FIND" = "build" ]; then
        buildMediaStreamer2
        export MEDIASTREAMER_CFLAGS=" -I$PWD/mediastreamer2 -I$PWD/mediastreamer2/include -I$PWD/mediastreamer2/include/mediastreamer2"
        export MEDIASTREAMER_LIBS="$PWD/mediastreamer2/src/libmediastreamer.la"
        if [ "$error" != "0" ]; then
            echo "make failed."
            exit $error
        fi
    fi
    buildLibjingle
    if [ "$error" != "0" ]; then
        echo "make failed."
        exit $error
    fi
    buildGtalx
    if [ "$error" != "0" ]; then
        echo "make failed."
        exit $error
    else
        echo "make finished. To install, call ./make install as root"
    fi
}

installAll()
{
    if [ ! -d "install" ]; then
        echo "before installing please run ./make (preferably as regular user)"
        exit 1
    fi
    if [ ! -f "install/usr/bin/gtalx" ]; then 
        echo "Cannot install, gtalX was not built succesfully."
        exit 1
    fi
    if [ -f "/usr/local/bin/gtalx" ]; then 
        echo "gtalX is already installed!!! before running"
        echo "./make install please uninstall."
        exit 1
    fi
    if [ -f "/usr/bin/gtalx" ]; then 
        echo "gtalX is already installed!!! before running"
        echo "./make install please uninstall."
        exit 1
    fi

    UNINSTALLFILE=install/usr/share/gtalx/uninstall_gtalx
    echo "#! /bin/bash" > $UNINSTALLFILE
    echo "" >> $UNINSTALLFILE

    echo "# This is the uninstall script for gtalX, it was generated when" >> $UNINSTALLFILE
    echo "# you called ./make install. Every care has been taken to ensure" >> $UNINSTALLFILE
    echo "# that it won't delete anything that it has not installed, but" >> $UNINSTALLFILE
    echo "# there is NO GUARANTEE about that. Please use it with care." >> $UNINSTALLFILE

    echo "" >> $UNINSTALLFILE

    echo "echo \"\"" >> $UNINSTALLFILE
    echo "echo \"This is the uninstall script for gtalX, it was generated when\"" >> $UNINSTALLFILE
    echo "echo \"you called ./make install. Every care has been taken to ensure\"" >> $UNINSTALLFILE
    echo "echo \"that it won't delete anything that it has not installed, but\"" >> $UNINSTALLFILE
    echo "echo \"there is NO GUARANTEE about that. Please use it with care.\"" >> $UNINSTALLFILE
    echo "echo \"\"" >> $UNINSTALLFILE
    echo "echo \"You have to be root to run this script succesfully.\"" >> $UNINSTALLFILE

    echo "" >> $UNINSTALLFILE
    echo "echo \"\"" >> $UNINSTALLFILE
    echo "echo -n \"Do you want to continue? (type yes to continue) \"" >> $UNINSTALLFILE
    echo "read ans" >> $UNINSTALLFILE
    echo "if [ \$ans = \"yes\" ]; then" >> $UNINSTALLFILE
    echo "    echo \"uninstalling...\"" >> $UNINSTALLFILE
    echo "else" >> $UNINSTALLFILE
    echo "    echo \"goodbye\"" >> $UNINSTALLFILE
    echo "    exit 1" >> $UNINSTALLFILE
    echo "fi" >> $UNINSTALLFILE

    echo "" >> $UNINSTALLFILE

    echo "removeDir()" >> $UNINSTALLFILE
    echo "{" >> $UNINSTALLFILE
    echo "    if [ -z \"\`ls \"\$1\"\`\" ]; then" >> $UNINSTALLFILE
    echo "        rmdir \"\$1\"" >> $UNINSTALLFILE
    echo "    fi" >> $UNINSTALLFILE
    echo "}" >> $UNINSTALLFILE

    echo "" >> $UNINSTALLFILE
    echo "echo \"\"" >> $UNINSTALLFILE

    echo "echo \"removing files\"" >> $UNINSTALLFILE
    find install -type f -print | sed 's/^install/rm -f /' >> $UNINSTALLFILE
    echo "echo \"removing symlinks\"" >> $UNINSTALLFILE
    find install -type l -print | sed 's/^install/unlink /' >> $UNINSTALLFILE
    echo "echo \"removing directories\"" >> $UNINSTALLFILE
    find install/usr -type d -print | sed 's/^install/removeDir /' | sort -r >> $UNINSTALLFILE

    #cp -R install/* /usr
    pushd install
    tar cf - * | ( cd /; tar xfp -)
    popd

    ldconfig

    echo "" >> $UNINSTALLFILE
    echo "ldconfig" >> $UNINSTALLFILE
    echo ""
    echo "Install finished, the uninstall script is here:"
    echo "/usr/share/gtalx/uninstall_gtalx"
    echo "You can delete files from this folder now, the uninstall script"
    echo "will let you uninstall gtalX if you decide so."
}

makeParam()
{
    pushd $1
    make $2
    popd
}

generateDebControlFile()
{
    arch=`uname -m`

    if [ "${arch}" = "i686" ]; then
	arch="i386"
    elif [ "${arch}" = "x86_64" ]; then
	arch="amd64"
    fi

    rm -fr install/DEBIAN
    inst_size=`du -s install/usr/ | awk -F" " '{ print $1 }'`
    
    mkdir -p install/DEBIAN
    touch install/DEBIAN/control
    echo "Package: gtalx" >> install/DEBIAN/control
    echo "Version: ${cur_rev}" >> install/DEBIAN/control
    echo "Section: devel " >> install/DEBIAN/control
    echo "Priority: optional " >> install/DEBIAN/control
    echo "Architecture: ${arch} " >> install/DEBIAN/control
    echo "Essential: no" >> install/DEBIAN/control
    echo "Depends: libqt4-gui, libogg0, libtheora0, libavcodec53, libraw1394-11, libvorbis0a, libmediastreamer0, libspeexdsp1" >> install/DEBIAN/control
    echo "Installed-Size: ${inst_size} " >> install/DEBIAN/control
    echo "Maintainer: Jozsef Bekes [bjdodo@hotmail.com]" >> install/DEBIAN/control
    echo "Description: gtalX is a gtalk chat application on Linux. It supports text and voip chat and file transfer. " >> install/DEBIAN/control
    echo ""  >> install/DEBIAN/control
}

if [ "$param1" = "" ]; then

    buildAll
    exit 0
fi

if [ "$param1" = "ubuntu" ]; then

    generateDebControlFile
    dpkg -b install/ ./
    rm -fr install/DEBIAN
    exit 0
fi


if [ "$param1" = "install" ]; then

    if [ `id -u` != "0" ]; then
        echo "you need to be root"
        exit 1
    fi
    installAll
    exit 0
fi

if [ "$param1" = "uninstall" ]; then

    echo "Please chmod and run the ./uninstall script as root."
    exit 0
fi

if [ "$param1" = "clean" ]; then
    makeParam "gtalx" "clean"
    makeParam "libjingle-modified" "clean"
    makeParam "mediastreamer2" "clean"
    makeParam "oRTP" "clean"
    makeParam "speex" "clean"
fi

if [ "$param1" = "distclean" ]; then
    makeParam "gtalx" "clean"
    makeParam "gtalx" "distclean"
    makeParam "libjingle-modified" "clean"
    makeParam "libjingle-modified" "distclean"
    makeParam "mediastreamer2" "clean"
    makeParam "mediastreamer2" "distclean"
    makeParam "oRTP" "clean"
    makeParam "oRTP" "distclean"
    makeParam "speex" "clean"
    makeParam "speex" "distclean"
fi

exit 1

